cmake_minimum_required(VERSION 3.8)
project(pathnode)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
find_package(rclcpp REQUIRED)
find_package(path_info_msg REQUIRED)
find_package(rmw REQUIRED)
find_package(LTTngUST REQUIRED)

if(BUILD_TESTING)
  find_package(ament_cmake_gtest REQUIRED)
  find_package(ament_lint_auto REQUIRED)
  find_package(sensor_msgs REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  # set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()

  ament_add_gtest(test_timing_advertise_publisher
    test/test_timing_advertise_publisher.cpp)
  target_include_directories(test_timing_advertise_publisher
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
  target_link_libraries(test_timing_advertise_publisher
    ${PROJECT_NAME})
  ament_target_dependencies(test_timing_advertise_publisher
    "rclcpp"
    "path_info_msg")

  ament_add_gtest(test_sub_timing_advertise_node
    test/test_sub_timing_advertise_node.cpp)
  target_include_directories(test_sub_timing_advertise_node
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
  target_link_libraries(test_sub_timing_advertise_node
    ${PROJECT_NAME})
  ament_target_dependencies(test_sub_timing_advertise_node
    "rclcpp"
    "path_info_msg"
    "sensor_msgs")
endif()

include_directories(include)
ament_export_include_directories(include)
install(
  DIRECTORY include/
  DESTINATION include)

add_library(${PROJECT_NAME} SHARED
  "src/path_node.cpp"
  "src/sub_timing_advertise_node.cpp"
  "src/timing_advertise_publisher.cpp"
  "src/tp.c"
)
target_link_libraries(${PROJECT_NAME} ${LTTNGUST_LIBRARIES})

ament_target_dependencies(${PROJECT_NAME}
  "rclcpp"
  "path_info_msg"
  LTTngUST
)
target_compile_definitions(${PROJECT_NAME}
  PRIVATE "PATHNODE_BUILDING_LIBRARY")
ament_export_targets(${PROJECT_NAME})
ament_export_libraries(${PROJECT_NAME})
ament_export_dependencies(rclcpp)

install(
  TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)

ament_package()
